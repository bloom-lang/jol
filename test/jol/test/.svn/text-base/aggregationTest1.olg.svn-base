program test;

import jol.types.basic.ValueList;


/* Tables that should be checked. checkTable(ResultTable, SolutionTable) */
define(checkTable, keys(), {TableName, TableName});


/************************** LINK *************************/
define(link, keys(0,1), {String, String});
/* 1 -> 2 -> 3 -> 4 */
link("1", "2");
link("2", "3");
link("3", "4");
link("2", "4");

/* 5 -> 6 -> 7 -> 8 -> 9 */
link("5", "6");
link("6", "7");
link("7", "8");
link("8", "9");

/************************** LINK COUNT TEST *************************/
checkTable(new TableName("test::linkCount"), new TableName("test::linkCountSolution"));

define(linkCount, keys(0), {Integer});
linkCount(count<*>) :- link(Src, Dest);

define(linkCountSolution, keys(0), {Integer});
linkCountSolution(8);


/************************** PATH *************************/
define(path, keys(0,1,2), {String, String, Integer});
/* Initialize all paths with link */
path(Source, Destination, 1) :- link(Source, Destination);

/* Transitive closure over path, link. */
path(Source, Destination, Hops+1) :- 
	path(Source, Intermediate, Hops), link(Intermediate, Destination),
	linkCount(Count), Hops <= Count;
	
/************************** PATH AGGREGATION TEST *************************/
checkTable(new TableName("test::pathStats"), new TableName("test::pathStatsSolution"));
	
define(pathStats, keys(0,1), {string, string, float, float, int, int, ValueList});	
pathStats(Source, Destination, avg<Hops>, sum<Hops>, min<Hops>, max<Hops>, bottomk<Hops, K>) :- 
	path(Source, Destination, Hops),
	K := 2;
	
define(pathStatsSolution, keys(0,1), {string, string, float, float, int, int, ValueList});	
	
pathStatsSolution("1", "2", 1.0, 1.0, 1, 1, [1]);    // 1 -> 2
pathStatsSolution("1", "3", 2.0, 2.0, 2, 2, [2]);    // 1 -> 3
pathStatsSolution("1", "4", 2.5, 5.0, 2, 3, [2, 3]); // 1 -> 4
pathStatsSolution("2", "3", 1.0, 1.0, 1, 1, [1]);    // 2 -> 3
pathStatsSolution("2", "4", 1.5, 3.0, 1, 2, [1, 2]); // 2 -> 4
pathStatsSolution("3", "4", 1.0, 1.0, 1, 1, [1]);    // 3 -> 4
pathStatsSolution("5", "6", 1.0, 1.0, 1, 1, [1]);    // 5 -> 6
pathStatsSolution("5", "7", 2.0, 2.0, 2, 2, [2]);    // 5 -> 7
pathStatsSolution("5", "8", 3.0, 3.0, 3, 3, [3]);    // 5 -> 8
pathStatsSolution("5", "9", 4.0, 4.0, 4, 4, [4]);    // 5 -> 9
pathStatsSolution("6", "7", 1.0, 1.0, 1, 1, [1]);    // 6 -> 7
pathStatsSolution("6", "8", 2.0, 2.0, 2, 2, [2]);    // 6 -> 8
pathStatsSolution("6", "9", 3.0, 3.0, 3, 3, [3]);    // 6 -> 9
pathStatsSolution("7", "8", 1.0, 1.0, 1, 1, [1]);    // 7 -> 8
pathStatsSolution("7", "9", 2.0, 2.0, 2, 2, [2]);    // 7 -> 9
pathStatsSolution("8", "9", 1.0, 1.0, 1, 1, [1]);    // 8 -> 9
	
	
	