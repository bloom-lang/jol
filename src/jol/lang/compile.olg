program compile;

import jol.lang.plan.Program;
import jol.types.table.TableName;

/*******************************************************************/
/*** Table definitions ***/
define(dependency, keys(0,1,2), {String, TableName, TableName});
define(priorityUpdate, {String, TableName, Integer});
define(config, {String, Program});
define(checkStrata, {String, Integer});

/*******************************************************************/
/*** Facts that initialize priority with this program's predicates ***/

runtime::priority("compile", new TableName("global", "compiler"),  0);
runtime::priority("compile", new TableName("global", "predicate"), 0);
runtime::priority("compile", new TableName("global", "rule"),      0);

runtime::priority("compile", new TableName("compile", "config"),         0);
runtime::priority("compile", new TableName("compile", "dependency"),     1);
runtime::priority("compile", new TableName("compile", "priorityUpdate"), 2);
runtime::priority("compile", new TableName("runtime", "priority"),       3);
runtime::priority("compile", new TableName("compile", "checkStrata"),    4);


/*******************************************************************/
/*** Compile rules: Initialize program priority/strata **/

/*
checkStratification
checkStrata(Program, count<*>) :-
	runtime::priority(Program, TableName, Priority);

watch(checkStrata, i);
*/

/* Determine R/G graph dependencies. */
dependency(ProgramName, Head.name(), Body.name()) :-
	config(ProgramName, Object),
	rule(ProgramName, Rule),
	predicate(ProgramName, Rule, 0, _, Head), /* Position == 0 */
	predicate(ProgramName, Rule, Pos, _, Body),
	Head.name() != Body.name(), Pos > 0,
	ProgramName != "compile";

/* Transitive closure over the dependency graph. */
dependency(ProgramName, Ancestor, Child) :-
	dependency(ProgramName, Ancestor, Descendant),
	dependency(ProgramName, Descendant, Child),
	Ancestor != Child;

/* Initialize all predicates to stratum 0. */
runtime::priority(ProgramName, Pred.name(), 0) :-
	config(ProgramName, Object),
	rule(ProgramName, Rule),
	predicate(ProgramName, Rule, Pos, Event, Pred),
	ProgramName != "compile";

runtime::priority(ProgramName, TableName, 0) :-
	config(ProgramName, Object),
	fact(ProgramName, TableName, Tuple),
	ProgramName != "compile";


/* Bubble up predicates in the stratum chain. */
priorityUpdate(ProgramName, Head, max<Priority>) :-
	runtime::priority(ProgramName, Head, HPriority),
	runtime::priority(ProgramName, Body, BPriority),
	dependency(ProgramName, Head, Body),
	notin dependency(ProgramName, Body, Head),
	HPriority <= BPriority,
	Priority := BPriority + 1;

runtime::priority(ProgramName, Pred, Priority) :-
	priorityUpdate(ProgramName, Pred, Priority);


/*******************************************************************/
/*** Compile uninstall program **/
import java.lang.Boolean;

define(uninstall, {String, Boolean});
define(hardUninstall, {String});

delete
program(Program, Owner, Object) :-
	uninstall(Program, _),
	program(Program, Owner, Object),
	Owner != "system";

hardUninstall(Program) :-
	uninstall(Program, Hard),
	program(Program, Owner, Object),
	Owner != "system";

delete
runtime::priority(Program, Pred, Priority) :-
	hardUninstall(Program),
	runtime::priority(Program, Pred, Priority);

delete
query(Program, Rule, Public, Async, Delete, Event, Input, Output, Object) :-
	hardUninstall(Program),
	query(Program, Rule, Public, Async, Delete, Event, Input, Output, Object);

delete
rule(Program, Rule, Public, Async, Delete, Object) :-
	hardUninstall(Program),
	rule(Program, Rule, Public, Async, Delete, Object);

delete
predicate(Program, Rule, Position, Event, Object) :-
	hardUninstall(Program),
	predicate(Program, Rule, Position, Event, Object);

delete
selection(Program, Rule, Position, Object) :-
	hardUninstall(Program),
	selection(Program, Rule, Position, Object);

delete
assignment(Program, Rule, Position, Object) :-
	hardUninstall(Program),
	assignment(Program, Rule, Position, Object);

delete
watches(Program, Tablename, Modifier, Operator) :-
	hardUninstall(Program),
	watches(Program, Tablename, Modifier, Operator);



