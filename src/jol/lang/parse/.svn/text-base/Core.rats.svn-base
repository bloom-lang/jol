module Core(Spacing, Symbol, Reserved, Identifier, Literal);

import Spacing;
import Symbol;
import Reserved;
import Identifier;
import Literal;

/*
 * A program is a sequence of zero or more statements. 
 * A statement is a clause followed by a period, 
 */

public generic Program = ProgramName Spacing Clauses EndOfFile ;

//----------------------------  ProgramName ---------------------------------/

String ProgramName = void:"program":Word Word void:";":Symbol ;

//----------------------------  Clauses ---------------------------------/

generic Clauses = (Clause void:";":Symbol)* ;

Node Clause =
    <Rule>   Rule
  / <Watch>  Watch
  / <Timer>  Timer
  / <Load>   Load
  / <Fact>   Fact
  / <Import> Import
  / <Stasis> StasisTable
  / <Define> Definition
  ;
  
//----------------------------  Load  --------------------------------------/

generic Load = 
    void:"load":Word  void:"(":Symbol StringConstant void:",":Symbol TableName void:")":Symbol
  / void:"load":Word  void:"(":Symbol StringConstant void:",":Symbol TableName void:",":Symbol StringConstant void:")":Symbol
  ;

  
//----------------------------  Import  --------------------------------------/

generic Import = void:"import":Word TypeName;

//----------------------------  Fact  --------------------------------------/

generic Fact = TableName void:"(":Symbol ExpressionList void:")":Symbol;


//----------------------------  Rules  --------------------------------------/

generic Rule = 
      ("public":Word)? ("async":Word)? null ("delete":Word)? RuleHead void:":-":Symbol RuleBody 
    / ("public":Word)? ("async":Word)? Name ("delete":Word)? RuleHead void:":-":Symbol RuleBody 
    ;

generic RuleHead = Predicate;
	
generic RuleBody = 
	  TermList void:"{":Symbol BodyExtension void:"}":Symbol
	/ TermList
	;

Pair<Node> TermList =  Term (void:",":Symbol Term)* ;

Node Term =
	TableFunction
  / Predicate
  / Assignment
  / Selection
  ;

generic BodyExtension = 
	  Assignment void:";":Symbol BodyExtension
	/ Assignment void:";":Symbol
	/ Expression void:";":Symbol BodyExtension
	/ Expression void:";":Symbol
	;


//----------------------------   Timer  ---------------------------/
// timer(Name, Type, Period, TTL, Delay);

generic Timer =
    void:"timer":Word void:"(":Symbol TableName void:",":Symbol
    TimerType void:",":Symbol IntegerConstant void:",":Symbol 
    IntegerConstant void:",":Symbol IntegerConstant void:")":Symbol 
    ;
   
String TimerType =
	  "physical":Word
	/ "logical":Word
	;

//----------------------------  Definition  ---------------------------/

generic Definition =
    <Table> void:"define":Word void:"(":Symbol TableName void:",":Symbol
            Keys void:",":Symbol Schema void:")":Symbol 
            @Table
  / <Event> void:"define":Word void:"(":Symbol TableName
            void:",":Symbol Schema void:")":Symbol 
            @Event
  ; 
  
generic StasisTable =
    <Table> void:"stasis":Word 
            void:"(":Symbol TableName void:",":Symbol
            Keys void:",":Symbol Schema void:")":Symbol 
  ;

generic Keys = 
     <Keys>  void:"keys":Word void:"(":Symbol IntegerList void:")":Symbol
   / <NoKey> void:"keys":Word void:"(":Symbol void:")":Symbol
  ;

generic Schema = void:"{":Symbol TypeDefList void:"}":Symbol;

Pair<Node> TypeDefList = Type (void:",":Symbol Type)* ;

//----------------------------  Watch  --------------------------------------/

generic Watch =
    <Global> void:"watch":Word void:"(":Symbol TableName void:")":Symbol
  / <Flow>   void:"watch":Word void:"(":Symbol TableName void:",":Symbol WatchFlow Spacing void:")":Symbol
  ;

transient String WatchFlow = [taeidrs]+;

//----------------------------  TableFunction  --------------------------------------/

generic TableFunction = 
     TableName void:"(":Symbol Predicate void:")":Symbol
     ;

//----------------------------  Predicate  --------------------------------------/

generic Predicate = 
      ("notin":Word)? TableName EventModifier? Arguments
      ;

//----------------------------  Assignment  ---------------------------------/

generic Assignment = Variable void:":=":Symbol Expression;

//----------------------------  Selection  ---------------------------------/

generic Selection = Expression;

//----------------------------  Expressions  ---------------------------------/

generic Expression = IfElseExpression;
  
Pair<Node> ExpressionList = Expression (void:",":Symbol Expression)* ;
  
transient generic IfElseExpression =
	<IfElse> LogicalOrExpression void:"?":Symbol Expression void:":":Symbol Expression
  / <Base>   yyValue:LogicalOrExpression
  ;
  
transient generic LogicalOrExpression =
     <Or>  LogicalOrExpression void:"||":Symbol LogicalAndExpression
  / <Base> yyValue:LogicalAndExpression
  ;

transient generic LogicalAndExpression =
    <And>  LogicalAndExpression void:"&&":Symbol EqualityExpression
  / <Base> yyValue:EqualityExpression
  ;

transient generic EqualityExpression =
    <Recursion>  EqualityExpression EqualityOperator InequalityExpression
  / <Base>       yyValue:InequalityExpression
  ;

String EqualityOperator =
    <Equal>       "==":Symbol
  / <NotEqual>    "!=":Symbol
  / <LessGreater> "<>":Symbol
  ;

transient generic InequalityExpression =
    InequalityExpression InequalityOperator ShiftExpression
  / yyValue:ShiftExpression
  ;

String InequalityOperator =
    <Less>         "<":Symbol
  / <Greater>      ">":Symbol
  / <LessEqual>    "<=":Symbol
  / <GreaterEqual> ">=":Symbol
  ;

transient generic ShiftExpression =
    <Recursion>  ShiftExpression ShiftOperator AdditiveExpression
  / <Base>       yyValue:AdditiveExpression
  ;

String ShiftOperator =
    <Left>  "<<":Symbol
  / <Right> ">>":Symbol
  ;

transient generic AdditiveExpression =
    <Recursion>  AdditiveExpression AdditiveOperator MultiplicativeExpression
  / <Base>       yyValue:MultiplicativeExpression
  ;

String AdditiveOperator =
    <Plus>  "+":Symbol
  / <Minus> "-":Symbol
  ;

transient generic MultiplicativeExpression =
    <Recursion> MultiplicativeExpression MultiplicativeOperator 
                UnaryExpression
  / <Base>      yyValue:UnaryExpression
  ;

String MultiplicativeOperator =
    <Times>  "*":Symbol
  / <Over>   "/":Symbol
  / <Modulo> "%":Symbol
  ;

Node UnaryExpression =
	<Cast>       CastExpression
  / <LogicalNot> LogicalNegationExpression
  / <Inclusive>  InclusiveExpression
  / <Base>       yyValue:PostfixExpression
  ;

generic LogicalNegationExpression =
  void:"!":Symbol UnaryExpression
  ;
  
generic CastExpression =
  void:"(":Symbol Type void:")":Symbol UnaryExpression
  ;

generic InclusiveExpression =
    PrimaryExpression "in":Word RangeExpression
  / PrimaryExpression "in":Word Variable
  ;

generic RangeExpression =
  LeftRangeOperator Expression void:"-":Symbol  Expression RightRangeOperator
  ;

String LeftRangeOperator =
    <Inclusive>    "[":Symbol
  / <Exclusive>    "(":Symbol
  ;
String RightRangeOperator =
    <Inclusive>    "]":Symbol
  / <Exclusive>    ")":Symbol
  ;

generic PostfixExpression =
    <Reference>  PostfixExpression void:".":Symbol Name
    	         @Reference
  / <Method>     PostfixExpression Arguments
    		     @Method
  / <ArrayIndex> PostfixExpression void:"[":Symbol Constant void:"]":Symbol
                 @ArrayIndex
  / <Increment>  PostfixExpression "++":Symbol
                 @Increment
  / <Decrement>  PostfixExpression "--":Symbol
                 @Decrement
  / <Base>       PrimaryExpression
  ;

Node PrimaryExpression =
   <Alias>        Alias Spacing
 / <Variable>     Variable Spacing
 / <Location>     Location Spacing
 / <NewClass>     NewClass Spacing
 / <Aggregate>    Aggregate Spacing
 / <Reference>    ReferenceName Spacing
 / <Constant>     Constant Spacing
 / <ListValues>   ValuesList Spacing
 / <Context>      void:"(":Symbol Expression void:")":Symbol
 ;

transient generic Arguments =
    <Arguments>   void:"(":Symbol ExpressionList void:")":Symbol
  / <NoArguments> void:"(":Symbol void:")":Symbol
  ;

generic NewClass = void:"new":Word TypeName;

generic ReferenceName = Name;

generic Aggregate = 
     <Generic>  "generic":Word void:"<":Symbol PostfixExpression void:">":Symbol
   / <TopK1>    "topk":Word    void:"<":Symbol AggregateVariable void:",":Symbol IntegerConstant void:">":Symbol
   / <TopK2>    "topk":Word    void:"<":Symbol AggregateVariable void:",":Symbol AggregateVariable void:">":Symbol
   / <BottomK1> "bottomk":Word void:"<":Symbol AggregateVariable void:",":Symbol IntegerConstant void:">":Symbol
   / <BottomK2> "bottomk":Word void:"<":Symbol AggregateVariable void:",":Symbol AggregateVariable void:">":Symbol
   / <Limit1>   "limit":Word   void:"<":Symbol AggregateVariable void:",":Symbol IntegerConstant void:">":Symbol
   / <Limit2>   "limit":Word   void:"<":Symbol AggregateVariable void:",":Symbol AggregateVariable void:">":Symbol
   / <Basic>    Name void:"<":Symbol PostfixExpression void:">":Symbol
   ;

Node AggregateVariable =
    <LocationVariable>  Location
  / <Variable>          Variable
  ;
  
 generic ValuesList = 
 	  <Values> void:"[":Symbol ExpressionList void:"]":Symbol
 	/ <Empty>  void:"[":Symbol void:"]":Symbol
 	;

//----------------------------  Alias  ----------------------------------/

generic Alias =
    Variable void:":=":Symbol void:'$' IntegerConstant;
