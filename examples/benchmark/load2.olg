program path;

import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.lang.System;

import jol.types.basic.TupleSet;
import jol.types.basic.Tuple;
import jol.types.table.TableName;

define(counter, keys(0,1), {Integer, Long});
define(stat, keys(0,1,2), {String, Integer, Long});
define(print, keys(0,2), {Integer, String, Long, Long});
define(limits, keys(0,1), {Integer, Long});

stat("start",   1, java.lang.System.currentTimeMillis() );
stat("start", N+1, java.lang.System.currentTimeMillis() ) :- stat("stop", N, A);

stat("stop",    N, java.lang.System.currentTimeMillis() ) :- counter(N,MAX), limits(N,MAX);

counter(N,0L)   :- stat("start", N, A), limits(N,MAX);
counter(N,1L+I) :- counter(N,I), notin limits(N,I);

// Second rule would be better implementation, but want to force it to do an aggregate.
print(N, "counted to ", max<C>, STOP-START) :- stat("start", N, START) , stat("stop", N, STOP), counter(N,C);
//print(N, "counted to ", C, STOP-START) :- stat("start", N, START) , stat("stop", N, STOP), limits(N,C);

watch(print, di);

limits(1,100L);
limits(2,1000L);
limits(3,5000L);
limits(4,10000L);
limits(5,50000L);
limits(6,100000L);
//limits(7,500000L);

