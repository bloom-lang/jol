program path;

import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.lang.System;

import jol.types.basic.TupleSet;
import jol.types.basic.Tuple;
import jol.types.table.TableName;

/**
  limits: col 0 = N, col 1 = C

  Each tuple defines a phase, N, where we'll count from zero to C.
*/
define(limits, keys(0,1), {Integer, Long});

/**
  The key is only on the first column, so this table never has more
  than one tuple per loop (~ 5 tuples total)
*/
define(counter, keys(0), {Integer, Long});
/**
  stat contains timestamps for start and stop events for each phase
*/
define(stat, keys(0,1,2), {String, Integer, Long});
/**
  watch print to output the timings in an easy to read format
*/
define(print, keys(0,2), {Integer, String, Long, Long});
/**
  initial event to start program
*/
stat("start",   1, java.lang.System.currentTimeMillis() );
/**
  Create start timestamp after stop timestamp of previous phase
*/
stat("start", N+1, java.lang.System.currentTimeMillis() ) :- stat("stop", N, A);
/**
  When we get to the max value, send stop event
*/
stat("stop",    N, java.lang.System.currentTimeMillis() ) :- counter(N,MAX), limits(N,MAX);

/**
  Count from zero to limits (N,I)
*/
counter(N,0L)   :- stat("start", N, A), limits(N,MAX);
counter(N,1L+I) :- counter#insert(N,I), notin limits(N,I);

/**
  Second rule would be better implementation, but want to force it to do an aggregate.
*/
print(N, "counted to ", max<C>, STOP-START) :- stat("start", N, START) , stat("stop", N, STOP), counter(N,C);
//print(N, "counted to ", C, STOP-START) :- stat("start", N, START) , stat("stop", N, STOP), limits(N,C);

watch(print, di);

limits(1,100L);
limits(2,1000L);
limits(3,5000L);
limits(4,10000L);
/**
  Counting this high takes > 60 sec for now.
*/
//limits(5,50000L);
//limits(6,100000L);
//limits(7,500000L);

